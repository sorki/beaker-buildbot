#!/usr/bin/env python
import logging
import subprocess

from beaker_buildbot.core import rule

class BuildBot(object):
    def __init__(self, work_dir, schedulers):
        self.work_dir = work_dir
        # TODO: try to cd to work dir

    def commit_received(self, git_hash):
        cmd = 'git pull --all --quiet'
        try:
            subprocess.check_call(cmd.split())
        except subprocess.CalledProcessError:
            logging.error('Unable to pull origin, skipping this commit')
            return

        self.resolve_branches(git_hash)

    def resolve_branches(self, git_hash):
        # Resolves all branches for current commit
        cmd = 'git branch -r --contains %s --no-color' % git_hash

        out = subprocess.check_output(cmd.split())
        self.to_build = {}
        for l in map(lambda x: x.strip(), out.splitlines()):
            if '->' in l: continue
            if l in self.to_build:
                self.to_build[l].append(git_hash)
            else:
                self.to_build[l] = [git_hash]

    def planning_loop(self):
        if len(self.to_build) > 1:
            for branch, commitlist in self.to_build.items():
                pass

def main():
    git_hash = '3e0a42bc629f0ff13a581511838d52e6513f5b15'
    #print "Asyncore received %s" % git_hash
    rule_str = '((BeakerLoadAvare)) && ((Nightly || Cumulative[3]))'
    #rule_str = '((BeakerLoadAvare)) && ((Nightly[0,24] || Cumulative[3]))'
    print rule_str
    scheduler = rule.RuleSchedule(rule_str)
    print scheduler.schedule()

if __name__ == "__main__":
    main()

